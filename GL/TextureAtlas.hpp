#ifndef TEXTUREATLAS_H
#define TEXTUREATLAS_H
#include <sparsehash/dense_hash_map>
#include <gl.h>
#include <vector>
#include "Rect.hpp"
#include "Bitmask.hpp"
#include "Texture.hpp"
/* Class for loading .bin.gz files and associated .dds.gz files, generated by recrunch */
class TextureAtlas{
public:
	TextureAtlas();
	bool loadFromFile(const std::string& file_path);
	const Texture findSubTexture(const std::string& name);
	const Bitmask& getBitmask(const Texture* tex);
	std::vector<std::string> getSubTextureNames();
	~TextureAtlas(){
		if (m_texture_handles != nullptr){
			glDeleteTextures(m_num_textures,m_texture_handles);
			delete[] m_texture_handles;
		}
	}
	GLuint* m_texture_handles = nullptr;
	int m_num_textures;

private:
	struct Atlas
	{
		Atlas(){
			m_texture_table.set_empty_key("");
		}
		google::dense_hash_map<std::string, Texture> m_texture_table;
		GLuint m_texture = 0;
		GLuint format;
		uint16_t width=0, height=0;
	};
	bool loadDDSgz(const std::string& path, Atlas& atlas);
	bool loadBINgz(const std::string& path, const Atlas& atlas);
	std::vector<Atlas> m_atlas_list;
	google::dense_hash_map<GLuint, Bitmask> Bitmasks;
};

#endif
