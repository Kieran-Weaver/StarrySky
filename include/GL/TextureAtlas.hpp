#ifndef TEXTUREATLAS_H
#define TEXTUREATLAS_H
#include <gl.h>
#include <vector>
#include <string>
#include <util/Rect.hpp>
#include <util/Bitmask.hpp>
#include <GL/Texture.hpp>

/* Class for loading .bin.gz files and associated .dds.gz files, generated by crunch */
struct Atlas{
	std::unordered_map<std::string, Texture> m_texture_table;
	GLuint m_texture = 0;
	GLuint format = 0;
	uint16_t width=0, height=0;
};
class TextureAtlas{
public:
	explicit TextureAtlas(const std::string& file_path);
	const Texture findSubTexture(const std::string& name);
	const Bitmask& getBitmask(const Texture* tex);
	std::vector<std::string> getSubTextureNames();
	~TextureAtlas(){
		glDeleteTextures(m_num_textures,m_texture_handles.data());
	}
	std::vector<GLuint> m_texture_handles;
	int m_num_textures;

private:
	std::vector<Atlas> m_atlas_list;
	std::unordered_map<GLuint, Bitmask> Bitmasks;
	bool loadDDSgz(const std::string& path, Atlas& atlas);
	bool loadBINgz(const std::string& path, const Atlas& atlas);
};

#endif
